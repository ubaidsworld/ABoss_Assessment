name: Deploying app on Kubernetes
on:
  workflow_dispatch:  
  # push:
    # branches:
    #   - main  # Trigger on push to main branch

jobs:
  # unit_test_modules:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.11

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install pytest
  #         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  #     - name: Run unit tests
  #       run: |
  #         pytest -v unit_test.py
          
  # docker-build-and-push:
  #   runs-on: ubuntu-latest
  #   needs: unit_test_modules
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/spam_check:latest
  
  deploy-k8s-with-helm:
    runs-on: ubuntu-latest
    # needs: docker-build-and-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      
      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Check and Install Nginx Ingress Controller
        run: |
          if ! kubectl get ns ingress-nginx >/dev/null 2>&1; then
            echo "üõ†Ô∏è Installing ingress-nginx..."
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.11.1/deploy/static/provider/aws/deploy.yaml
          else
            echo "‚úÖ Ingress-nginx is already present."
          fi
      - name: Check and Install Prometheus & Grafana
        env:
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        run: |
          #!/bin/bash
          set -e
      
          # Create namespace if not exists
          kubectl get namespace monitoring >/dev/null 2>&1 || kubectl create namespace monitoring
      
          # Add helm repos
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
          helm repo add grafana https://grafana.github.io/helm-charts || true
          helm repo update
      
          # Install Prometheus if not already installed
          if ! helm ls -n monitoring | grep -q prometheus; then
            echo "Installing Prometheus..."
            helm install prometheus prometheus-community/prometheus \
              --namespace monitoring \
              --set server.persistentVolume.enabled=false
          else
            echo "Prometheus is already installed."
          fi
      
          # Install Grafana if not already installed
          if ! helm ls -n monitoring | grep -q grafana; then
            echo "Installing Grafana..."
            helm install grafana grafana/grafana \
              --namespace monitoring \
              --set adminPassword="${GRAFANA_ADMIN_PASSWORD}" \
              --set service.type=LoadBalancer
          else
            echo "Grafana is already installed."
          fi
    
      - name: Helm upgrade or install
        run: |
          helm uninstall aboss
          helm install aboss helm/auto_k8s_deploy --wait
          
  test-deploy-success:
    runs-on: ubuntu-latest
    needs: deploy-k8s-with-helm
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Wait for app to become live
        run: |
          echo "Waiting for https://aboss-demo.duckdns.org to be ready..."
          for i in {1..30}; do
            if curl -sSf --max-time 30 https://aboss-demo.duckdns.org > /dev/null; then
              echo "‚úÖ App is live!"
              exit 0
            else
              echo "‚è≥ Waiting... ($i/30)"
              sleep 10
            fi
          done
          echo "‚ùå App did not become ready in time."
          exit 1
